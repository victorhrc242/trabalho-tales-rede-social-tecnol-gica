Perfeito, Victor! Aqui está o pacote completo com todas as instruções detalhadas e organizadas de tudo que você pediu até agora, com base no seu projeto .NET API + Supabase para a rede social — incluindo endpoints de post, feed, seguidores e notificações.

🧱 MODELOS (Models)
✅ Post.cs
csharp
Copy
Edit
public class Post
{
    public Guid Id { get; set; }
    public Guid AutorId { get; set; }
    public string Conteudo { get; set; }
    public string Imagem { get; set; }
    public DateTime DataPostagem { get; set; }
    public int Curtidas { get; set; }
    public int Comentarios { get; set; }
    public List<string> Tags { get; set; } // Adicionado para o algoritmo
}
✅ Seguidor.cs
csharp
Copy
Edit
public class Seguidor
{
    public Guid Id { get; set; }
    public Guid Usuario1 { get; set; } // Quem segue
    public Guid Usuario2 { get; set; } // Quem será seguido
    public string Status { get; set; } // "pendente", "aceito", "recusado"
    public DateTime DataSolicitacao { get; set; }
}
✅ Notificacao.cs
csharp
Copy
Edit
public class Notificacao
{
    public Guid Id { get; set; }
    public Guid UsuarioId { get; set; }
    public string Tipo { get; set; }
    public Guid ReferenciaId { get; set; }
    public string Mensagem { get; set; }
    public DateTime DataEnvio { get; set; }
}
📦 CONTROLLERS E ENDPOINTS
📌 1. Criar Post
📁 PostController.cs

csharp
Copy
Edit
[HttpPost]
public async Task<IActionResult> CriarPost([FromBody] Post post)
{
    post.Id = Guid.NewGuid();
    post.DataPostagem = DateTime.UtcNow;

    _context.Posts.Add(post);
    await _context.SaveChangesAsync();

    return Ok(post);
}
📌 2. Feed Dinâmico (com base em quem segue e tags curtidas)
📁 FeedController.cs

csharp
Copy
Edit
[HttpGet("{usuarioId}")]
public async Task<IActionResult> ObterFeed(Guid usuarioId)
{
    // Posts dos usuários que o usuário segue
    var seguindoIds = await _context.Seguidores
        .Where(s => s.Usuario1 == usuarioId && s.Status == "aceito")
        .Select(s => s.Usuario2)
        .ToListAsync();

    var postsSeguindo = await _context.Posts
        .Where(p => seguindoIds.Contains(p.AutorId))
        .ToListAsync();

    // Exemplo: simular interesse por tags "tecnologia", "escola"
    var tagsDeInteresse = new List<string> { "tecnologia", "escola" };

    var postsPorTags = await _context.Posts
        .Where(p => p.Tags.Any(t => tagsDeInteresse.Contains(t)) && !seguindoIds.Contains(p.AutorId))
        .ToListAsync();

    // Combinar e ordenar
    var feed = postsSeguindo.Concat(postsPorTags)
        .OrderByDescending(p => p.DataPostagem)
        .ToList();

    return Ok(feed);
}
📌 3. Enviar Solicitação de Seguir
csharp
Copy
Edit
[HttpPost("solicitar")]
public async Task<IActionResult> EnviarSolicitacao([FromBody] Seguidor seguidor)
{
    seguidor.Id = Guid.NewGuid();
    seguidor.Status = "pendente";
    seguidor.DataSolicitacao = DateTime.UtcNow;

    _context.Seguidores.Add(seguidor);
    await _context.SaveChangesAsync();

    return Ok("Solicitação de seguir enviada.");
}
📌 4. Aceitar Solicitação de Seguir
csharp
Copy
Edit
[HttpPut("aceitar/{id}")]
public async Task<IActionResult> AceitarSolicitacao(Guid id)
{
    var solicitacao = await _context.Seguidores.FindAsync(id);

    if (solicitacao == null)
        return NotFound("Solicitação não encontrada.");

    if (solicitacao.Status == "aceito")
        return BadRequest("Solicitação já foi aceita.");

    solicitacao.Status = "aceito";
    _context.Seguidores.Update(solicitacao);
    await _context.SaveChangesAsync();

    // Notificar quem enviou a solicitação
    var notificacao = new Notificacao
    {
        Id = Guid.NewGuid(),
        UsuarioId = solicitacao.Usuario1,
        Tipo = "seguindo",
        ReferenciaId = solicitacao.Id,
        Mensagem = "Sua solicitação de seguir foi aceita!",
        DataEnvio = DateTime.UtcNow
    };

    _context.Notificacoes.Add(notificacao);
    await _context.SaveChangesAsync();

    return Ok("Solicitação aceita com sucesso.");
}
📌 5. Listar Quem o Usuário Segue
csharp
Copy
Edit
[HttpGet("seguindo/{usuarioId}")]
public async Task<IActionResult> GetSeguindo(Guid usuarioId)
{
    var seguindo = await _context.Seguidores
        .Where(s => s.Usuario1 == usuarioId && s.Status == "aceito")
        .Select(s => s.Usuario2)
        .ToListAsync();

    return Ok(seguindo);
}
📌 6. Listar Seguidores do Usuário
csharp
Copy
Edit
[HttpGet("seguidores/{usuarioId}")]
public async Task<IActionResult> GetSeguidores(Guid usuarioId)
{
    var seguidores = await _context.Seguidores
        .Where(s => s.Usuario2 == usuarioId && s.Status == "aceito")
        .Select(s => s.Usuario1)
        .ToListAsync();

    return Ok(seguidores);
}
📌 7. Recusar Solicitação
csharp
Copy
Edit
[HttpPut("recusar/{id}")]
public async Task<IActionResult> RecusarSolicitacao(Guid id)
{
    var solicitacao = await _context.Seguidores.FindAsync(id);

    if (solicitacao == null)
        return NotFound("Solicitação não encontrada.");

    solicitacao.Status = "recusado";
    _context.Seguidores.Update(solicitacao);
    await _context.SaveChangesAsync();

    return Ok("Solicitação recusada.");
}
⚙️ CONTEXT (DbContext)
Exemplo:

csharp
Copy
Edit
public class AppDbContext : DbContext
{
    public DbSet<Post> Posts { get; set; }
    public DbSet<Seguidor> Seguidores { get; set; }
    public DbSet<Notificacao> Notificacoes { get; set; }

    public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }
}
✅ Finalizando
Você agora tem:

📬 Criação de post

📰 Feed dinâmico por quem segue + tags de interesse

➕ Enviar solicitação para seguir

✔️ Aceitar e recusar solicitações

🔔 Notificações automáticas

🔎 Visualizar quem segue e quem são seus seguidores

Se quiser que eu gere também os endpoints para curtir post, comentar, ou criar tags automaticamente, posso te ajudar com isso rapidinho.

Quer que eu já monte esses também?
